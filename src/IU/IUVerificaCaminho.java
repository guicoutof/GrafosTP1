/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IU;

import Classes.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author AlphaLegends
 */
public class IUVerificaCaminho extends javax.swing.JFrame {
    ArrayList<Integer> fila = new ArrayList <>();
    private int tipoEstrutura;
    private MatrizAdjacencia MA;
    ListaAdjacencia[] LA;
    int busca=2;
    /**
     * Creates new form IUVerificaCaminho
     */
    public IUVerificaCaminho() {
        initComponents();
        Descoberta.setText("");
    }

    public IUVerificaCaminho(MatrizAdjacencia MA) {
        initComponents();
        this.MA = MA;
        tipoEstrutura = 1;
        Descoberta.setText("");
        
    }
    
    public IUVerificaCaminho(ListaAdjacencia[] LA) {
        initComponents();
        this.LA = LA;
        tipoEstrutura = 2;
        Descoberta.setText("");
        
    }
    
    public void enfileira(int vert){
        fila.add(vert);
    }
    
    private int desenfileira(){
        int v = fila.get(0);
        fila.remove(0);
        return v;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Vertice1 = new javax.swing.JTextField();
        Vertice2 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Descoberta = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Vertice 1");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Vertice 2");

        jRadioButton1.setText("Busca em Largura");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("Busca em Profundidade");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Resultado :");

        Descoberta.setColumns(20);
        Descoberta.setRows(5);
        jScrollPane1.setViewportView(Descoberta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(Vertice1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Vertice2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton1))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addGap(10, 10, 10)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Vertice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jRadioButton2))
                    .addComponent(Vertice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
    jRadioButton2.setSelected(false);
    busca = 0;//Busca em largura
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
    jRadioButton1.setSelected(false);
    busca = 1;//Busca em profundidade
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    VerificaCaminho();
    }//GEN-LAST:event_jButton1ActionPerformed

    //funcao principal
    public void VerificaCaminho(){
        int u = Integer.parseInt(Vertice1.getText());
        int v = Integer.parseInt(Vertice2.getText());
        String msg;
        
        if(busca == 0){
            if(tipoEstrutura == 1){//Matriz Adjacencia

                msg = VerificaCaminhoMatrizLargura(u,v);
                Descoberta.setText(msg);
            }else if(tipoEstrutura == 2){//Lista Adjacencia

                msg = VerificaCaminhoListaLargura(u,v);
                Descoberta.setText(msg);
            }
        }else if(busca == 1){
            if(tipoEstrutura == 1){//Matriz Adjacencia

                msg = VerificaCaminhoMatrizProfundidade(u,v);
                Descoberta.setText(msg);
            }else if(tipoEstrutura == 2){//Lista Adjacencia

                msg = VerificaCaminhoListaProfundidade(u,v);
                Descoberta.setText(msg);
            }
        }else JOptionPane.showMessageDialog(null,"Escolha o tipo de Busca para verificar o caminho");
    }
    
    //funcao que faz a busca em largura com matriz
    public String VerificaCaminhoMatrizLargura(int u,int v){
        int raiz = u;
        int fim = v;
        int[][] matriz = MA.getMatriz();
        int[] cor = new int[matriz.length];
        int[] d = new int[matriz.length];
        int[] pai = new int[matriz.length];
        int aux = 0;//nao existe caminho de k at√© o v
        
        for(int i=0;i<cor.length;i++){
            cor[i] = 0; //0 = branco
            d[i] = Integer.MAX_VALUE;
            pai[i] = -1;
        }
        cor[raiz] = 1;//cinza
        d[raiz] = 0;
        pai[raiz] = -1;
        enfileira(raiz);
        while(!fila.isEmpty()){
            int k = desenfileira();
            for(int j=0;j<matriz.length;j++){
                if(matriz[k][j]!=Integer.MAX_VALUE){
                    if(cor[j]==0){
                        cor[j]=1;//cinza
                        d[j] = d[k]+1;
                        pai[j] = k;
                        if(j == fim){
                            aux = 1;// caminho encontrado de k a v
                            break;
                        }
                        enfileira(j);
                    }
                }
            }
            cor[k] = 2;//preto   
        }
        String msg = "inicio ";
        if(aux == 1 ){
            for(int i=0;i<d.length;i++){
                if(cor[i]!=0){
                    msg += i+" distancia "+d[i]+"\n";
                }
            }
        }else if(aux == 0){
            msg = "Nao foi encontrado caminho de "+raiz+" at√© "+fim;
        }
        return msg;
    }
    
    //funcao que faz a busca em largura com lista
    public String VerificaCaminhoListaLargura(int u,int v){
        int raiz = u;
        int fim = v;
        int[] cor = new int[LA.length];
        int[] d = new int[LA.length];
        int[] pai = new int[LA.length];
        int aux = 0;//nao existe caminho de k at√© o v
        
        for(int i=0;i<cor.length;i++){
            cor[i] = 0; //0 = branco
            d[i] = Integer.MAX_VALUE;
            pai[i] = -1;
        }
        cor[raiz] = 1;//cinza
        d[raiz] = 0;
        pai[raiz] = -1;
        enfileira(raiz);
        while(!fila.isEmpty()){
            int k = desenfileira();
            ArrayList<Vertice> lista = LA[k].getLista();
            for(int i=0;i<lista.size();i++){
                int j = lista.get(i).getVertice();
                if(cor[j]==0){
                    cor[j]=1;//cinza
                    d[j] = d[k]+1;
                    pai[j] = k;
                    if(j == fim){
                            aux = 1;// caminho encontrado de k a v
                            break;
                        }
                    enfileira(j);
                }    
            }
            cor[k] = 2;//preto   
        }
        String msg = "inicio ";
        if(aux == 1 ){
            for(int i=0;i<d.length;i++){
                if(cor[i]!=0){
                    msg += i+" distancia "+d[i]+"\n";
                }
            }
        }else if(aux == 0){
            msg = "Nao foi encontrado caminho de "+raiz+" at√© "+fim;
        }
        return msg;
    }
    
    //funcao que faz a busca em profundidade com matriz
    public String VerificaCaminhoMatrizProfundidade(int u,int v){
        
        int raiz = u;
        int fim = v;
        int[][] matriz = MA.getMatriz();
        int[] cor = new int[matriz.length];
        int[] d = new int[matriz.length];
        int[] f = new int[matriz.length];
        int aux = 0;//nao existe caminho de k at√© o v
        
        for(int i=0;i<cor.length;i++){
            cor[i] = 0; //0 = branco
        }
        int tempo = 0;
        for(int i=raiz;i<matriz.length;i++){
            for(int j=0;j<matriz.length;j++){
                if(matriz[i][j]!=Integer.MAX_VALUE){
                    if(cor[i]==0){
                        if(tempo == Integer.MIN_VALUE)break;
                        tempo = VisitaBuscaMatriz(i,cor,d,f,matriz,tempo,fim);
                    }
                    
                }
            }
        }
        String msg = "inicio ";
        if(tempo == Integer.MIN_VALUE ){
            for(int i=0;i<d.length;i++){
                if(cor[i]!=0){
                    msg += i+" tempo de descoberta "+d[i]+"\n";
                }
            }
            aux = 1;
        }else if(aux == 0){
            msg = "Nao foi encontrado caminho de "+raiz+" at√© "+fim;
        }
        return msg;
    }
    
            //Auxiliar para Matriz Adjacencia
    public int VisitaBuscaMatriz(int u,int[] cor,int[] d,int[] f,int[][] matriz,int tempo,int fim){
        cor[u] = 1;//1 = cinza
        tempo++;
        d[u]=tempo;
        if(u == fim){
            return Integer.MIN_VALUE;
        }
        for(int k=0;k<matriz.length;k++){
            if(matriz[u][k]!=Integer.MAX_VALUE){
                if(cor[k]==0){
                    if(tempo == Integer.MIN_VALUE)return Integer.MIN_VALUE;
                    tempo = VisitaBuscaMatriz(k,cor,d,f,matriz,tempo,fim);
                }
            }
        }
        cor[u]=2;//2 = preto;
        tempo++;
        f[u]=tempo;
    return tempo;
    }
    
    
    //funcao que faz a busca em profundidade com lista
    public String VerificaCaminhoListaProfundidade(int u,int v){
        int raiz = u;
        int fim = v;
        int[] cor = new int[LA.length];
        int[] d = new int[LA.length];
        int[] f = new int[LA.length];
        int aux = 0;//nao existe caminho de k at√© o v
        
        for(int i=0;i<LA.length;i++){
            cor[i] = 0; //0 = branco
        }
        int tempo=0;
        for(int i=raiz;i<LA.length;i++){
            if(cor[i]==0){
                if(tempo == Integer.MIN_VALUE)break;
                tempo = VisitaBuscaLista(i,cor,d,f,LA,tempo,fim);
            }  
        }
        String msg = "inicio ";
        if(tempo == Integer.MIN_VALUE ){
            for(int i=0;i<d.length;i++){
                if(cor[i]!=0){
                    msg += i+" tempo de descoberta "+d[i]+"\n";
                }
            }
            aux = 1;
        }else if(aux == 0){
            msg = "Nao foi encontrado caminho de "+raiz+" at√© "+fim;
        }
        return msg;
    }
    
            //Auxiliar para Lista Adjacencia
    public int VisitaBuscaLista(int u,int[] cor,int[] d,int[] f,ListaAdjacencia[] LA,int tempo,int fim){
        cor[u] = 1;//1 = cinza
        tempo++;
        d[u]=tempo;
        if(u == fim){
            return Integer.MIN_VALUE;
        }
        ArrayList<Vertice> lista = LA[u].getLista();
        int i=0;
        for(int k=lista.get(i).getVertice();i<lista.size();i++){
            if(cor[LA[k].getVertice()]==0){
                if(tempo == Integer.MIN_VALUE)return Integer.MIN_VALUE;
                tempo = VisitaBuscaLista(k,cor,d,f,LA,tempo,fim);
                if(tempo == Integer.MIN_VALUE)return Integer.MIN_VALUE;
            }  
        }
        cor[u]=2;//2 = preto;
        tempo++;
        f[u]=tempo;
    return tempo;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IUVerificaCaminho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IUVerificaCaminho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IUVerificaCaminho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IUVerificaCaminho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IUVerificaCaminho().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Descoberta;
    private javax.swing.JTextField Vertice1;
    private javax.swing.JTextField Vertice2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
